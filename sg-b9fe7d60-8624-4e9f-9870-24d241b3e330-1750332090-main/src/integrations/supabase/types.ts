// This file is automatically generated. Do not edit it directly.
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (PublicSchema["Tables"] & PublicSchema["Views"])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (PublicSchema["Tables"] &
        PublicSchema["Views"])
    ? (PublicSchema["Tables"] &
        PublicSchema["Views"])[PublicTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  PublicEnumNameOrOptions extends
    | keyof PublicSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof PublicSchema["Enums"]
    ? PublicSchema["Enums"][PublicEnumNameOrOptions]
    : never

type PublicSchema = Database[Extract<keyof Database, "public">]

export interface Database {
  public: {
    Tables: {
      user_investments: {
        Row: {
          id: string
          name: string
          email: string
          phone_number: string
          invested_amount: number
          investment_date: string 
          investment_type: "Daily" | "Monthly" | "One-time"
          return_percentage: number
          monthly_payout: number
          upi_transaction_id: string
          total_paid_out: number
          notes?: string | null
          status: "Active" | "Inactive"
          created_at?: string | null
          updated_at?: string | null
        }
        Insert: {
          id?: string
          name: string
          email: string
          phone_number: string
          invested_amount: number
          investment_date: string
          investment_type: "Daily" | "Monthly" | "One-time"
          return_percentage?: number
          monthly_payout: number
          upi_transaction_id: string
          total_paid_out?: number
          notes?: string | null
          status?: "Active" | "Inactive"
          created_at?: string | null
          updated_at?: string | null
        }
        Update: {
          id?: string
          name?: string
          email?: string
          phone_number?: string
          invested_amount?: number
          investment_date?: string
          investment_type?: "Daily" | "Monthly" | "One-time"
          return_percentage?: number
          monthly_payout?: number
          upi_transaction_id?: string
          total_paid_out?: number
          notes?: string | null
          status?: "Active" | "Inactive"
          created_at?: string | null
          updated_at?: string | null
        }
        Relationships: []
      }
      earnings: {
        Row: {
          id: string
          month_year: string
          total_earnings: number
          created_at?: string | null
          updated_at?: string | null
        }
        Insert: {
          id?: string
          month_year: string
          total_earnings: number
          created_at?: string | null
          updated_at?: string | null
        }
        Update: {
          id?: string
          month_year?: string
          total_earnings?: number
          created_at?: string | null
          updated_at?: string | null
        }
        Relationships: []
      }
      payouts: {
        Row: {
          id: string
          user_investment_id: string
          month_year: string
          payout_amount: number
          status: "Paid" | "Not Paid"
          date_paid?: string | null
          notes?: string | null
          created_at?: string | null
          updated_at?: string | null
        }
        Insert: {
          id?: string
          user_investment_id: string
          month_year: string
          payout_amount: number
          status?: "Paid" | "Not Paid"
          date_paid?: string | null
          notes?: string | null
          created_at?: string | null
          updated_at?: string | null
        }
        Update: {
          id?: string
          user_investment_id?: string
          month_year?: string
          payout_amount?: number
          status?: "Paid" | "Not Paid"
          date_paid?: string | null
          notes?: string | null
          created_at?: string | null
          updated_at?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "payouts_user_investment_id_fkey"
            columns: ["user_investment_id"]
            isOneToOne: false
            referencedRelation: "user_investments"
            referencedColumns: ["id"]
          }
        ]
      }
    }
    Views: {
      [key: string]: unknown
    }
    Functions: {
      [key: string]: unknown
    }
    Enums: {
      [key: string]: unknown
    }
    CompositeTypes: {
      [key: string]: unknown
    }
  }
}
